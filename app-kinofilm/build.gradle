apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: "dagger.hilt.android.plugin"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"

def appName = "kinofilm"
ext.versionMajor = 0 // 1 to 99
ext.versionMinor = 0 // 0 to 99
ext.versionPatch = 1 // 0 to 999
ext.versionClassifier = "SNAPSHOT"
ext.versionClassifierCodes = ["SNAPSHOT": 0, "APLHA": 1, "BETA": 2, "RC1": 3, "RC2": 4, "RELEASE": 5].withDefault { 5 }

android {
    compileSdkVersion compileSdk
    buildToolsVersion buildtoolsVersion

    defaultConfig {
        applicationId "com.androidplayground.kinofilm"

        minSdkVersion minSdk
        targetSdkVersion targetSdk

        versionCode generateVersionCode()
        versionName generateVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        setProperty("archivesBaseName", "${appName}-${versionName}")
    }

    buildFeatures{
        dataBinding = true
        // viewBinding = true
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("debug.keystore")
        }
        release {
            def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            storeFile rootProject.file(keystoreProperties["keyStoreFile"])
            storePassword keystoreProperties["keyStorePassword"]
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyAliasPassword"]
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            signingConfig signingConfigs.release
        }
    }

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dexOptions {
        javaMaxHeapSize "1g"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation project(":core-android")
    implementation project(":feature-app-start")
    implementation project(":lib-repository")

    // Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltJetpackVersion"

    // Firebase SDK
    // Import the BoM for the Firebase platform
    implementation platform("com.google.firebase:firebase-bom:$firebaseBoMVersion")
    implementation "com.google.firebase:firebase-analytics-ktx"
    implementation "com.google.firebase:firebase-crashlytics-ktx"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation("org.threeten:threetenbp:$threetenbpVersion") {
        exclude module: "com.jakewharton.threetenabp:threetenabp:$threetenabpVersion"
    }

    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}

private Integer generateVersionCode() {
    def versionCode = ext.versionMajor * 1000000 + ext.versionMinor * 10000 + ext.versionPatch * 10 + ext.versionClassifierCodes.get(ext.versionClassifier)
    println "VersionCode " + versionCode
    return versionCode
}

private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null) {
        ext.versionClassifier = "RELEASE"
    }
    if (ext.versionClassifier != "RELEASE") {
        versionName += "-" + ext.versionClassifier
    }
    println "VersionName " + versionName
    return versionName
}
